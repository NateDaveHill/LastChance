@page "/toDoList"

@inject IDialogService DialogService

<MudGrid>
    <MudItem xs="12">
        <MudButton Variant="Variant.Filled" StartIcon="@Icons.Material.Filled.Delete" Color="Color.Error" FullWidth="true" @onclick="DeleteAllToDos">Remove All</MudButton>
    </MudItem>
    <MudItem xs="12" Class="justify-center">
        <MudCard Outlined="true">
            <MudCardHeader>
                <CardHeaderContent>
                    <MudText Typo="Typo.h6">Add New ToDo</MudText>
                </CardHeaderContent>
            </MudCardHeader>
            <MudTextField Placeholder="Title of ToDo" @bind-Value="TempToDos.Title"></MudTextField>
            <br/>
            <MudTextField Placeholder="Comments" @bind-Value="TempToDos.Comment"></MudTextField>

            <MudCardActions Class="justify-center">
                <MudGrid>
                    <MudItem xs="6">
                        <MudButton OnClick="Add" Variant="Variant.Filled" Color="Color.Success" FullWidth="true">Add</MudButton>
                    </MudItem>
                    <MudItem xs="6">
                        <MudButton OnClick="Cancel" Variant="Variant.Filled" Color="Color.Secondary" FullWidth="true">Cancel</MudButton>
                    </MudItem>
                </MudGrid>
            </MudCardActions>
        </MudCard>
        <br/>
    </MudItem>
    <MudItem xs="12">
        <MudGrid>
            @foreach (var toDo in ToDos)
            {
                <MudItem xs="6" sm="3">
                    <br/>
                    <MudPaper Height="Auto" Width="Auto" Elevation="3"
                              Style="@($"color:{Theme.Palette.Dark}; padding: 5%; background:{Theme.Palette.Warning}; white-space: normal; overflow: auto; text-overflow: ellipsis;")"
                              Class="p-4" Outlined="true">
                        <MudGrid>
                            <MudItem xs="12">
                                <MudCheckBox @bind-Checked="@toDo.IsDone" T="bool" Color="Color.Primary">
                                    ToDo: @toDo.Title
                                    <br/>
                                    Comment: @toDo.Comment
                                </MudCheckBox>
                            </MudItem>
                            <MudItem xs="3"/>
                            <MudItem xs="3"/>
                            <MudItem xs="3"/>
                            <MudItem xs="3">
                                <MudIconButton Icon="@Icons.Material.Filled.Delete" aria-label="delete" @onclick="args => DeleteToDo(args, toDo.Id)"></MudIconButton>
                            </MudItem>
                        </MudGrid>
                    </MudPaper>
                    <br/>
                </MudItem>
            }
        </MudGrid>
    </MudItem>
</MudGrid>


@code {

    private readonly MudTheme Theme = new();

    public List<ToDos> ToDosOfDay;
    readonly ToDos TempToDos = new();
    public List<ToDos>? ToDos = new();
    private DialogResult? result;

    protected override void OnInitialized()
    {
    }


    private void DeleteToDo(MouseEventArgs e, int toDoId)
    {
        var deleteToDo = ToDos.Where(x => x.Id == toDoId).First();
        ToDos.Remove(deleteToDo);
    }

    private void DeleteAllToDos()
    {
        var allToDos = ToDos.Select(x => x).ToList();
        foreach (var todo in allToDos)
        {
            ToDos.Remove(todo);
        }
    }

    private void Add()
    {
        if (TempToDos.Comment == null || TempToDos.Title == null)
        {
            DialogService.ShowMessageBox(
                "NullError",
                "One of the TextAreas is empty, please fill out everything.",
                "Okay");
        }
        else
        {
            if (TempToDos.Title.Length > 10 || TempToDos.Comment.Length > 10)
            {
                DialogService.ShowMessageBox(
                    "MaxCapacity",
                    "You have reached max capacity of characters, please use less to proceed.",
                    "Okay");
            }
            else
            {
                ToDos.Add(new ToDos
                {
                    Title = TempToDos.Title,
                    Comment = TempToDos.Comment,
                    Created = DateTime.Now,
                    IsDone = false
                });
            }
        }

    }

    void Cancel()
    {
        TempToDos.Title = String.Empty;
        TempToDos.Comment = String.Empty;
    }

}